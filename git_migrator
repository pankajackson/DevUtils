#!/usr/bin/env python3

import os
import subprocess
import requests
import getpass
import re
import json
import logging
import gc
import argparse
import shutil


# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def check_tools_installed():
    """
    Check if required tools (git, gh) are installed.
    """
    required_tools = {
        "git": "Git is required for repository operations. Install it from https://git-scm.com/.",
        "gh": "GitHub CLI (gh) is required for creating repositories. Install it from https://cli.github.com/.",
    }

    missing_tools = []
    for tool, message in required_tools.items():
        if not shutil.which(tool):
            missing_tools.append((tool, message))

    if missing_tools:
        logger.error("The following tools are missing:")
        for tool, message in missing_tools:
            logger.error(f"- {tool}: {message}")
        return False
    return True


def is_valid_repo_name(repo_name):
    """Validate repository name."""
    return bool(re.match(r"^[a-zA-Z0-9_.-]+$", repo_name))


def is_valid_url(url):
    """Validate URL format."""
    return bool(re.match(r"^(https?://|git@[\w.-]+:[\w./-]+\.git$)", url))


def parse_repo_url(url):
    """Extract repository name and user name from URL for GitHub, GitLab, Bitbucket, and other git hosting services."""
    match = re.match(
        r"^(https?://(?:github|gitlab|bitbucket)\.com/|git@(?:github|gitlab|bitbucket)\.org:)([\w-]+)/([\w-]+)(\.git)?$",
        url,
    )
    if match:
        platform = match.group(1).split(".")[
            1
        ]  # Extract platform (github, gitlab, bitbucket)
        user_name = match.group(2)
        repo_name = match.group(3)
        return platform, user_name, repo_name
    else:
        logger.error(f"Invalid Git repository URL: {url}")
        return None, None, None


def create_github_repo(repo_name, token, is_private=True):
    """
    Create a GitHub repository using the GitHub API.
    """
    logger.info(f"Creating GitHub repository: {repo_name}...")
    url = "https://api.github.com/user/repos"
    headers = {"Authorization": f"Bearer {token}"}
    payload = {
        "name": repo_name,
        "private": is_private,
    }

    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 201:
        repo_data = response.json()
        owner_login = repo_data.get("owner", {}).get("login")
        logger.info(f"Repository '{repo_name}' created successfully.")
        return f"https://github.com/{owner_login}/{repo_name}.git"
    elif response.status_code == 422:
        logger.info(f"Repository '{repo_name}' already exists.")
        return f"https://github.com/{os.getenv('USER')}/{repo_name}.git"
    else:
        logger.error(
            f"Error creating repository: {response.json().get('message', 'Unknown error')}"
        )
        return None


def create_github_repo_with_cli(repo_name, is_private=True):
    """
    Create a GitHub repository using the GitHub CLI (gh).
    """
    privacy = "private" if is_private else "public"
    logger.info(f"Creating GitHub repository '{repo_name}' as {privacy}...")

    try:
        # Use gh CLI to create the repository
        subprocess.run(
            ["gh", "repo", "create", repo_name, "--" + privacy, "--confirm"], check=True
        )
        logger.info(f"Repository '{repo_name}' created successfully.")

        # Fetch the authenticated user's login
        result = subprocess.run(
            ["gh", "api", "user"], capture_output=True, text=True, check=True
        )
        user_data = json.loads(result.stdout)
        username = user_data.get("login")
        return f"https://github.com/{username}/{repo_name}.git"
    except subprocess.CalledProcessError as e:
        logger.error(f"Error creating repository: {e.stderr}")
        return None


def migrate_repo(source_repo_url, target_repo_url):
    """
    Migrate a repository from the source to the target.
    """
    repo_name = source_repo_url.split("/")[-1].replace(".git", "")
    temp_dir = f"/tmp/{repo_name}"

    try:
        # Step 1: Clone the source repository with all branches
        logger.info(f"Cloning source repository '{source_repo_url}'...")
        subprocess.run(
            ["git", "clone", "--mirror", source_repo_url, temp_dir], check=True
        )

        # Step 2: Add the target as a remote
        logger.info(f"Adding target repository '{target_repo_url}' as remote...")
        subprocess.run(
            ["git", "-C", temp_dir, "remote", "add", "target", target_repo_url],
            check=True,
        )

        # Step 3: Push to the target repository
        logger.info(f"Pushing to target repository '{target_repo_url}'...")
        subprocess.run(
            ["git", "-C", temp_dir, "push", "--mirror", "target"], check=True
        )

        logger.info("Migration completed successfully!")
    except subprocess.CalledProcessError as e:
        logger.error(f"Error during migration: {e.stderr}")
    finally:
        # Cleanup
        if os.path.exists(temp_dir):
            subprocess.run(["rm", "-rf", temp_dir])


def arg_parser():
    parser = argparse.ArgumentParser(description="Repository Migration Tool")
    parser.add_argument("source_repo_url", help="Source repository URL")
    parser.add_argument("--target-repo-url", help="Target repository URL", default="")
    parser.add_argument("--repo-name", help="Name for the new target repository")
    parser.add_argument(
        "--private", action="store_true", help="Make the repository private"
    )
    return parser


def main():
    parser = arg_parser()
    args = parser.parse_args()

    if not check_tools_installed():
        return

    if not is_valid_url(args.source_repo_url):
        logger.error("Invalid source repository URL.")
        return

    if args.target_repo_url and not is_valid_url(args.target_repo_url):
        logger.error("Invalid target repository URL.")
        return

    # Use the source repo URL to fetch default repo name and user name
    src_platform, src_user_name, src_repo_name = parse_repo_url(args.source_repo_url)
    if not args.target_repo_url:
        github_token = getpass.getpass(
            "Enter your GitHub personal access token: "
        ).strip()
        repo_name = (
            args.repo_name
            or input("Enter the name for the new target repository: ").strip()
        )
        # If target repo name is not provided, use the extracted repo name
        repo_name = args.repo_name or repo_name or src_repo_name

        if not is_valid_repo_name(repo_name):
            logger.error(
                "Invalid repository name. Only alphanumeric characters, '.', '_', and '-' are allowed."
            )
            return

        is_private = args.private or input(
            "Should the repository be private? (yes/no): "
        ).strip().lower() in ["yes", "y"]

        target_repo_url = (
            create_github_repo(repo_name, github_token, is_private)
            if github_token
            else create_github_repo_with_cli(repo_name, is_private)
        )
        if not target_repo_url:
            logger.error("Failed to create target repository. Exiting.")
            return
    else:
        target_repo_url = args.target_repo_url

    # Migrate the repository
    migrate_repo(args.source_repo_url, target_repo_url)

    # Clear sensitive data from memory
    if "github_token" in locals():
        github_token = None
    gc.collect()


if __name__ == "__main__":
    main()
