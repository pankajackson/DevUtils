#!/usr/bin/env python3

import os
import subprocess
import requests
import getpass


def create_github_repo(repo_name, token, is_private=True):
    """
    Create a GitHub repository using the GitHub API.
    """
    print(f"Creating GitHub repository: {repo_name}...")
    url = "https://api.github.com/user/repos"
    headers = {"Authorization": f"Bearer {token}"}
    payload = {
        "name": repo_name,
        "private": is_private,
    }

    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 201:
        print(f"Repository '{repo_name}' created successfully.")
        return f"https://github.com/{response.json()['owner']['login']}/{repo_name}.git"
    elif response.status_code == 422:
        print(f"Repository '{repo_name}' already exists.")
        return f"https://github.com/{response.json()['owner']['login']}/{repo_name}.git"
    else:
        print(f"Error creating repository: {response.json()}")
        return None


def create_github_repo_with_cli(repo_name, is_private=True):
    """
    Create a GitHub repository using the GitHub CLI (gh).
    """
    privacy = "private" if is_private else "public"
    print(f"Creating GitHub repository '{repo_name}' as {privacy}...")

    try:
        # Use gh CLI to create the repository
        subprocess.run(
            ["gh", "repo", "create", repo_name, "--" + privacy, "--confirm"], check=True
        )
        print(f"Repository '{repo_name}' created successfully.")
        return f"https://github.com/{os.getenv('USER')}/{repo_name}.git"
    except subprocess.CalledProcessError as e:
        print(f"Error creating repository: {e}")
        return None


def migrate_repo(source_repo_url, target_repo_url):
    """
    Migrate a repository from the source to the target.
    """
    repo_name = source_repo_url.split("/")[-1].replace(".git", "")
    temp_dir = f"/tmp/{repo_name}"

    try:
        # Step 1: Clone the source repository with all branches
        print(f"Cloning source repository '{source_repo_url}'...")
        subprocess.run(
            ["git", "clone", "--mirror", source_repo_url, temp_dir], check=True
        )

        # Step 2: Add the target as a remote
        print(f"Adding target repository '{target_repo_url}' as remote...")
        subprocess.run(
            ["git", "-C", temp_dir, "remote", "add", "target", target_repo_url],
            check=True,
        )

        # Step 3: Push to the target repository
        print(f"Pushing to target repository '{target_repo_url}'...")
        subprocess.run(
            ["git", "-C", temp_dir, "push", "--mirror", "target"], check=True
        )

        print("Migration completed successfully!")
    except subprocess.CalledProcessError as e:
        print(f"Error during migration: {e}")
    finally:
        # Cleanup
        if os.path.exists(temp_dir):
            subprocess.run(["rm", "-rf", temp_dir])


def main():
    print("=== Repository Migration Tool ===")

    # Step 1: Ask for source and target repository URLs
    source_repo_url = input(
        "Enter the source repository URL (e.g., https://bitbucket.org/user/repo.git): "
    ).strip()
    target_repo_url = input(
        "Enter the target repository URL (or leave blank to create on GitHub): "
    ).strip()

    if not target_repo_url:
        # Step 2: Create a new repository on GitHub
        github_token = getpass.getpass(
            "Enter your GitHub personal access token: "
        ).strip()
        repo_name = input("Enter the name for the new target repository: ").strip()
        is_private = input(
            "Should the repository be private? (yes/no): "
        ).strip().lower() in ["yes", "y"]

        target_repo_url = create_github_repo(repo_name, github_token, is_private)
        if not target_repo_url:
            print("Failed to create target repository. Exiting.")
            return

    # Step 3: Migrate the repository
    migrate_repo(source_repo_url, target_repo_url)


if __name__ == "__main__":
    main()
