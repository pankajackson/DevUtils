#!/bin/bash

ACTION="$1"
DEVICE="$2"
DETAILS=false

if [[ "$3" == "--detail" ]]; then
    DETAILS=true
fi

# Function to get device name from udevadm
get_device_name() {
    local device=$1
    local device_name

    # Use udevadm to fetch device information
    device_name=$(udevadm info --query=property --name="$device" 2>/dev/null | grep -E '^ID_MODEL=' | cut -d= -f2)

    if [[ -n "$device_name" ]]; then
        echo "$device_name"
    else
        echo "Unknown Device"
    fi
}

# Function to list real camera devices
get_camera_devices() {
    for dev in /dev/video*; do
        if v4l2-ctl -d "$dev" --list-formats-ext 2>/dev/null | grep -q "Size:"; then
            echo "$dev"
        fi
    done
}

# Function to check if device is a valid camera device
validate_device() {
    local device=$1
    if [[ ! -e "$device" ]]; then
        echo "Error: Device $device not found!"
        exit 1
    fi

    if ! v4l2-ctl -d "$device" --list-formats-ext &>/dev/null; then
        echo "Error: Device $device is not a valid camera device."
        exit 1
    fi
}

# Function to check the status of a single device
check_device_status() {
    local device=$1

    # If permissions are so restricted that we can't even stat the device, assume OFF
    if [[ ! -r "$device" && ! -w "$device" && ! -x "$device" ]]; then
        echo "OFF"
        return
    fi

    local permissions=$(stat -c '%A' "$device" 2>/dev/null)
    if [[ "$permissions" =~ [rwx] ]]; then
        echo -n "ON"
        if $DETAILS; then
            local owner=$(stat -c '%U' "$device")
            local group=$(stat -c '%G' "$device")
            echo " (Permissions: $permissions, Owner: $owner, Group: $group)"
        else
            echo
        fi
    else
        echo -n "OFF"
        if $DETAILS; then
            echo " (Permissions: $permissions)"
        else
            echo
        fi
    fi
}

# Function to install required software
setup_environment() {
    echo "Setting up the environment..."

    # Detect the package manager
    if command -v apt >/dev/null 2>&1; then
        PACKAGE_MANAGER="apt"
        INSTALL_CMD="$PACKAGE_MANAGER install -y"
    elif command -v pacman >/dev/null 2>&1; then
        PACKAGE_MANAGER="pacman"
        INSTALL_CMD="$PACKAGE_MANAGER -S --noconfirm --needed"
    elif command -v dnf >/dev/null 2>&1; then
        PACKAGE_MANAGER="dnf"
        INSTALL_CMD="$PACKAGE_MANAGER install -y"
    else
        echo "Error: Unsupported package manager. Install 'v4l2-ctl' manually."
        exit 1
    fi

    echo "Using package manager: $PACKAGE_MANAGER"

    # Install required tools
    echo "Installing required software..."
    $INSTALL_CMD v4l-utils

    # Verify installation
    if command -v v4l2-ctl >/dev/null 2>&1; then
        echo "Setup complete. All required software is installed."
    else
        echo "Error: Failed to install required software. Please check your package manager or install manually."
        exit 1
    fi
}

# Check if device exists and is valid
if [[ -n "$DEVICE" ]]; then
    validate_device "$DEVICE"
fi

case $ACTION in
setup)
    setup_environment
    ;;
on)
    if [[ -n "$DEVICE" ]]; then
        chmod 660 "$DEVICE" 2>/dev/null
        if [[ $? -eq 0 ]]; then
            name=$(get_device_name "$DEVICE")
            echo "Camera device $name ($DEVICE) turned ON."
        else
            echo "Failed to turn ON $DEVICE. Check permissions."
        fi
    else
        for dev in $(get_camera_devices); do
            chmod 660 "$dev" 2>/dev/null
            if [[ $? -eq 0 ]]; then
                name=$(get_device_name "$dev")
                echo "Camera device $name ($dev) turned ON."
            else
                echo "Failed to turn ON $dev. Check permissions."
            fi
        done
    fi
    ;;
off)
    if [[ -n "$DEVICE" ]]; then
        chmod 000 "$DEVICE" 2>/dev/null
        if [[ $? -eq 0 ]]; then
            name=$(get_device_name "$DEVICE")
            echo "Camera device $name ($DEVICE) turned OFF."
        else
            echo "Failed to turn OFF $DEVICE. Check permissions."
        fi
    else
        for dev in $(get_camera_devices); do
            chmod 000 "$dev" 2>/dev/null
            if [[ $? -eq 0 ]]; then
                name=$(get_device_name "$dev")
                echo "Camera device $name ($dev) turned OFF."
            else
                echo "Failed to turn OFF $dev. Check permissions."
            fi
        done
    fi
    ;;
status)
    if [[ -n "$DEVICE" ]]; then
        name=$(get_device_name "$DEVICE")
        echo -n "Device $name ($DEVICE): "
        check_device_status "$DEVICE"
    else
        for dev in $(get_camera_devices); do
            name=$(get_device_name "$dev")
            echo -n "Device $name ($dev): "
            check_device_status "$dev"
        done
    fi
    ;;
*)
    echo "Usage: $0 {setup|on|off|status} [device] [--detail]"
    exit 1
    ;;
esac
